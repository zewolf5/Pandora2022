/* 
 * Pandoran global apis
 *
 * The set of APIs for all services at Pandora
 *
 * OpenAPI spec version: 1.0.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = IO.Swagger.Client.SwaggerDateConverter;

namespace IO.Swagger.Model
{
    /// <summary>
    /// PopulationRegisterIndividualBody
    /// </summary>
    [DataContract]
        public partial class PopulationRegisterIndividualBody :  IEquatable<PopulationRegisterIndividualBody>, IValidatableObject
    {
        /// <summary>
        /// Defines Community
        /// </summary>
        [JsonConverter(typeof(StringEnumConverter))]
                public enum CommunityEnum
        {
            /// <summary>
            /// Enum Summit for value: Summit
            /// </summary>
            [EnumMember(Value = "Summit")]
            Summit = 1,
            /// <summary>
            /// Enum Gilpin for value: Gilpin
            /// </summary>
            [EnumMember(Value = "Gilpin")]
            Gilpin = 2,
            /// <summary>
            /// Enum Pitkin for value: Pitkin
            /// </summary>
            [EnumMember(Value = "Pitkin")]
            Pitkin = 3,
            /// <summary>
            /// Enum Garfield for value: Garfield
            /// </summary>
            [EnumMember(Value = "Garfield")]
            Garfield = 4,
            /// <summary>
            /// Enum Fremont for value: Fremont
            /// </summary>
            [EnumMember(Value = "Fremont")]
            Fremont = 5,
            /// <summary>
            /// Enum Ouray for value: Ouray
            /// </summary>
            [EnumMember(Value = "Ouray")]
            Ouray = 6,
            /// <summary>
            /// Enum Huerfano for value: Huerfano
            /// </summary>
            [EnumMember(Value = "Huerfano")]
            Huerfano = 7,
            /// <summary>
            /// Enum Teller for value: Teller
            /// </summary>
            [EnumMember(Value = "Teller")]
            Teller = 8,
            /// <summary>
            /// Enum Mesa for value: Mesa
            /// </summary>
            [EnumMember(Value = "Mesa")]
            Mesa = 9,
            /// <summary>
            /// Enum Chaffee for value: Chaffee
            /// </summary>
            [EnumMember(Value = "Chaffee")]
            Chaffee = 10,
            /// <summary>
            /// Enum Hinsdale for value: Hinsdale
            /// </summary>
            [EnumMember(Value = "Hinsdale")]
            Hinsdale = 11        }
        /// <summary>
        /// Gets or Sets Community
        /// </summary>
        [DataMember(Name="community", EmitDefaultValue=false)]
        public CommunityEnum Community { get; set; }
        /// <summary>
        /// Defines Gender
        /// </summary>
        [JsonConverter(typeof(StringEnumConverter))]
                public enum GenderEnum
        {
            /// <summary>
            /// Enum MALE for value: MALE
            /// </summary>
            [EnumMember(Value = "MALE")]
            MALE = 1,
            /// <summary>
            /// Enum FEMALE for value: FEMALE
            /// </summary>
            [EnumMember(Value = "FEMALE")]
            FEMALE = 2        }
        /// <summary>
        /// Gets or Sets Gender
        /// </summary>
        [DataMember(Name="gender", EmitDefaultValue=false)]
        public GenderEnum Gender { get; set; }
        /// <summary>
        /// Defines MaterialStatus
        /// </summary>
        [JsonConverter(typeof(StringEnumConverter))]
                public enum MaterialStatusEnum
        {
            /// <summary>
            /// Enum SINGLE for value: SINGLE
            /// </summary>
            [EnumMember(Value = "SINGLE")]
            SINGLE = 1,
            /// <summary>
            /// Enum MARRIED for value: MARRIED
            /// </summary>
            [EnumMember(Value = "MARRIED")]
            MARRIED = 2,
            /// <summary>
            /// Enum WIDOWER for value: WIDOWER
            /// </summary>
            [EnumMember(Value = "WIDOWER")]
            WIDOWER = 3        }
        /// <summary>
        /// Gets or Sets MaterialStatus
        /// </summary>
        [DataMember(Name="material_status", EmitDefaultValue=false)]
        public MaterialStatusEnum? MaterialStatus { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="PopulationRegisterIndividualBody" /> class.
        /// </summary>
        /// <param name="community">community (required).</param>
        /// <param name="dateOfBirth">dateOfBirth (required).</param>
        /// <param name="dateOfDeath">dateOfDeath.</param>
        /// <param name="firstName">firstName (required).</param>
        /// <param name="gender">gender (required).</param>
        /// <param name="lastName">lastName (required).</param>
        /// <param name="materialStatus">materialStatus.</param>
        /// <param name="officialAddress">officialAddress.</param>
        /// <param name="pandoranSsn">pandoranSsn (required).</param>
        /// <param name="registrationOfficeIdentification">registrationOfficeIdentification (required).</param>
        public PopulationRegisterIndividualBody(CommunityEnum community = default(CommunityEnum), DateTime? dateOfBirth = default(DateTime?), DateTime? dateOfDeath = default(DateTime?), string firstName = default(string), GenderEnum gender = default(GenderEnum), string lastName = default(string), MaterialStatusEnum? materialStatus = default(MaterialStatusEnum?), string officialAddress = default(string), string pandoranSsn = default(string), string registrationOfficeIdentification = default(string))
        {
            // to ensure "community" is required (not null)
            if (community == null)
            {
                throw new InvalidDataException("community is a required property for PopulationRegisterIndividualBody and cannot be null");
            }
            else
            {
                this.Community = community;
            }
            // to ensure "dateOfBirth" is required (not null)
            if (dateOfBirth == null)
            {
                throw new InvalidDataException("dateOfBirth is a required property for PopulationRegisterIndividualBody and cannot be null");
            }
            else
            {
                this.DateOfBirth = dateOfBirth;
            }
            // to ensure "firstName" is required (not null)
            if (firstName == null)
            {
                throw new InvalidDataException("firstName is a required property for PopulationRegisterIndividualBody and cannot be null");
            }
            else
            {
                this.FirstName = firstName;
            }
            // to ensure "gender" is required (not null)
            if (gender == null)
            {
                throw new InvalidDataException("gender is a required property for PopulationRegisterIndividualBody and cannot be null");
            }
            else
            {
                this.Gender = gender;
            }
            // to ensure "lastName" is required (not null)
            if (lastName == null)
            {
                throw new InvalidDataException("lastName is a required property for PopulationRegisterIndividualBody and cannot be null");
            }
            else
            {
                this.LastName = lastName;
            }
            // to ensure "pandoranSsn" is required (not null)
            if (pandoranSsn == null)
            {
                throw new InvalidDataException("pandoranSsn is a required property for PopulationRegisterIndividualBody and cannot be null");
            }
            else
            {
                this.PandoranSsn = pandoranSsn;
            }
            // to ensure "registrationOfficeIdentification" is required (not null)
            if (registrationOfficeIdentification == null)
            {
                throw new InvalidDataException("registrationOfficeIdentification is a required property for PopulationRegisterIndividualBody and cannot be null");
            }
            else
            {
                this.RegistrationOfficeIdentification = registrationOfficeIdentification;
            }
            this.DateOfDeath = dateOfDeath;
            this.MaterialStatus = materialStatus;
            this.OfficialAddress = officialAddress;
        }
        

        /// <summary>
        /// Gets or Sets DateOfBirth
        /// </summary>
        [DataMember(Name="dateOfBirth", EmitDefaultValue=false)]
        [JsonConverter(typeof(SwaggerDateConverter))]
        public DateTime? DateOfBirth { get; set; }

        /// <summary>
        /// Gets or Sets DateOfDeath
        /// </summary>
        [DataMember(Name="dateOfDeath", EmitDefaultValue=false)]
        [JsonConverter(typeof(SwaggerDateConverter))]
        public DateTime? DateOfDeath { get; set; }

        /// <summary>
        /// Gets or Sets FirstName
        /// </summary>
        [DataMember(Name="first_name", EmitDefaultValue=false)]
        public string FirstName { get; set; }


        /// <summary>
        /// Gets or Sets LastName
        /// </summary>
        [DataMember(Name="last_name", EmitDefaultValue=false)]
        public string LastName { get; set; }


        /// <summary>
        /// Gets or Sets OfficialAddress
        /// </summary>
        [DataMember(Name="official_address", EmitDefaultValue=false)]
        public string OfficialAddress { get; set; }

        /// <summary>
        /// Gets or Sets PandoranSsn
        /// </summary>
        [DataMember(Name="pandoran_ssn", EmitDefaultValue=false)]
        public string PandoranSsn { get; set; }

        /// <summary>
        /// Gets or Sets RegistrationOfficeIdentification
        /// </summary>
        [DataMember(Name="registration_office_identification", EmitDefaultValue=false)]
        public string RegistrationOfficeIdentification { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class PopulationRegisterIndividualBody {\n");
            sb.Append("  Community: ").Append(Community).Append("\n");
            sb.Append("  DateOfBirth: ").Append(DateOfBirth).Append("\n");
            sb.Append("  DateOfDeath: ").Append(DateOfDeath).Append("\n");
            sb.Append("  FirstName: ").Append(FirstName).Append("\n");
            sb.Append("  Gender: ").Append(Gender).Append("\n");
            sb.Append("  LastName: ").Append(LastName).Append("\n");
            sb.Append("  MaterialStatus: ").Append(MaterialStatus).Append("\n");
            sb.Append("  OfficialAddress: ").Append(OfficialAddress).Append("\n");
            sb.Append("  PandoranSsn: ").Append(PandoranSsn).Append("\n");
            sb.Append("  RegistrationOfficeIdentification: ").Append(RegistrationOfficeIdentification).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as PopulationRegisterIndividualBody);
        }

        /// <summary>
        /// Returns true if PopulationRegisterIndividualBody instances are equal
        /// </summary>
        /// <param name="input">Instance of PopulationRegisterIndividualBody to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(PopulationRegisterIndividualBody input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Community == input.Community ||
                    (this.Community != null &&
                    this.Community.Equals(input.Community))
                ) && 
                (
                    this.DateOfBirth == input.DateOfBirth ||
                    (this.DateOfBirth != null &&
                    this.DateOfBirth.Equals(input.DateOfBirth))
                ) && 
                (
                    this.DateOfDeath == input.DateOfDeath ||
                    (this.DateOfDeath != null &&
                    this.DateOfDeath.Equals(input.DateOfDeath))
                ) && 
                (
                    this.FirstName == input.FirstName ||
                    (this.FirstName != null &&
                    this.FirstName.Equals(input.FirstName))
                ) && 
                (
                    this.Gender == input.Gender ||
                    (this.Gender != null &&
                    this.Gender.Equals(input.Gender))
                ) && 
                (
                    this.LastName == input.LastName ||
                    (this.LastName != null &&
                    this.LastName.Equals(input.LastName))
                ) && 
                (
                    this.MaterialStatus == input.MaterialStatus ||
                    (this.MaterialStatus != null &&
                    this.MaterialStatus.Equals(input.MaterialStatus))
                ) && 
                (
                    this.OfficialAddress == input.OfficialAddress ||
                    (this.OfficialAddress != null &&
                    this.OfficialAddress.Equals(input.OfficialAddress))
                ) && 
                (
                    this.PandoranSsn == input.PandoranSsn ||
                    (this.PandoranSsn != null &&
                    this.PandoranSsn.Equals(input.PandoranSsn))
                ) && 
                (
                    this.RegistrationOfficeIdentification == input.RegistrationOfficeIdentification ||
                    (this.RegistrationOfficeIdentification != null &&
                    this.RegistrationOfficeIdentification.Equals(input.RegistrationOfficeIdentification))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Community != null)
                    hashCode = hashCode * 59 + this.Community.GetHashCode();
                if (this.DateOfBirth != null)
                    hashCode = hashCode * 59 + this.DateOfBirth.GetHashCode();
                if (this.DateOfDeath != null)
                    hashCode = hashCode * 59 + this.DateOfDeath.GetHashCode();
                if (this.FirstName != null)
                    hashCode = hashCode * 59 + this.FirstName.GetHashCode();
                if (this.Gender != null)
                    hashCode = hashCode * 59 + this.Gender.GetHashCode();
                if (this.LastName != null)
                    hashCode = hashCode * 59 + this.LastName.GetHashCode();
                if (this.MaterialStatus != null)
                    hashCode = hashCode * 59 + this.MaterialStatus.GetHashCode();
                if (this.OfficialAddress != null)
                    hashCode = hashCode * 59 + this.OfficialAddress.GetHashCode();
                if (this.PandoranSsn != null)
                    hashCode = hashCode * 59 + this.PandoranSsn.GetHashCode();
                if (this.RegistrationOfficeIdentification != null)
                    hashCode = hashCode * 59 + this.RegistrationOfficeIdentification.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }
}
