/* 
 * Pandoran global apis
 *
 * The set of APIs for all services at Pandora
 *
 * OpenAPI spec version: 1.0.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = IO.Swagger.Client.SwaggerDateConverter;

namespace IO.Swagger.Model
{
    /// <summary>
    /// AccountTransactionsBody
    /// </summary>
    [DataContract]
        public partial class AccountTransactionsBody :  IEquatable<AccountTransactionsBody>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="AccountTransactionsBody" /> class.
        /// </summary>
        /// <param name="accountNumber">accountNumber.</param>
        /// <param name="rowLimit">rowLimit.</param>
        /// <param name="startAfterId">startAfterId.</param>
        public AccountTransactionsBody(string accountNumber = default(string), int? rowLimit = default(int?), int? startAfterId = default(int?))
        {
            this.AccountNumber = accountNumber;
            this.RowLimit = rowLimit;
            this.StartAfterId = startAfterId;
        }
        
        /// <summary>
        /// Gets or Sets AccountNumber
        /// </summary>
        [DataMember(Name="account_number", EmitDefaultValue=false)]
        public string AccountNumber { get; set; }

        /// <summary>
        /// Gets or Sets RowLimit
        /// </summary>
        [DataMember(Name="row_limit", EmitDefaultValue=false)]
        public int? RowLimit { get; set; }

        /// <summary>
        /// Gets or Sets StartAfterId
        /// </summary>
        [DataMember(Name="start_after_id", EmitDefaultValue=false)]
        public int? StartAfterId { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class AccountTransactionsBody {\n");
            sb.Append("  AccountNumber: ").Append(AccountNumber).Append("\n");
            sb.Append("  RowLimit: ").Append(RowLimit).Append("\n");
            sb.Append("  StartAfterId: ").Append(StartAfterId).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as AccountTransactionsBody);
        }

        /// <summary>
        /// Returns true if AccountTransactionsBody instances are equal
        /// </summary>
        /// <param name="input">Instance of AccountTransactionsBody to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(AccountTransactionsBody input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.AccountNumber == input.AccountNumber ||
                    (this.AccountNumber != null &&
                    this.AccountNumber.Equals(input.AccountNumber))
                ) && 
                (
                    this.RowLimit == input.RowLimit ||
                    (this.RowLimit != null &&
                    this.RowLimit.Equals(input.RowLimit))
                ) && 
                (
                    this.StartAfterId == input.StartAfterId ||
                    (this.StartAfterId != null &&
                    this.StartAfterId.Equals(input.StartAfterId))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.AccountNumber != null)
                    hashCode = hashCode * 59 + this.AccountNumber.GetHashCode();
                if (this.RowLimit != null)
                    hashCode = hashCode * 59 + this.RowLimit.GetHashCode();
                if (this.StartAfterId != null)
                    hashCode = hashCode * 59 + this.StartAfterId.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }
}
